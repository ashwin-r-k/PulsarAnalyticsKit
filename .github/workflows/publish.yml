name: Build & Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  
jobs:

  # 1. Build Windows Executable
  build-windows:
    if: startsWith(github.event.head_commit.message, 'publish:')
    runs-on: windows-latest
    env:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Show env
        run: env | grep TOKEN

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Read version
        id: read_version
        shell: bash
        run: |
          echo "Reading version..."
          cat version.txt
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Windows Executable
        run: |
          echo "Current directory: $(pwd)"
          pyrcc5 images.qrc -o images_rc.py
          pyinstaller --noconfirm --clean ./mainbuild.spec
          echo "Files in dist directory:"
          dir dist

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: dist/PulsarAnalyticsKit-*.exe

  # 2. Build Linux AppImage
  build-linux:
    needs: build-windows
    runs-on: ubuntu-latest
    env:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Show env
        run: env | grep TOKEN

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Read version
        id: read_version
        run: |
          echo "Reading version..."
          cat version.txt
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install AppImage Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          mv appimagetool-x86_64.AppImage appimagetool
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          mv linuxdeploy-x86_64.AppImage linuxdeploy
          echo "AppImage tools installed."

      - name: Build Linux Executable
        run: |
          echo "Current directory: $(pwd)"
          pyrcc5 images.qrc -o images_rc.py
          pyinstaller --noconfirm --clean ./mainbuild.spec
          echo "Files in dist directory:"
          ls -lh dist

      - name: Build AppImage
        run: |
          VERSION=$(cat version.txt)
          mkdir -p AppDir/usr/bin
          cp dist/PulsarAnalyticsKit-${VERSION}-linux AppDir/usr/bin/PulsarAnalyticsKit
          chmod +x AppDir/usr/bin/PulsarAnalyticsKit

          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp ./guibase/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/pulsar.png
          mkdir -p AppDir/usr/share/applications

          echo "[Desktop Entry]
          Version=1.0
          X-AppVersion=${VERSION}
          Name=Pulsar Analytics Kit
          Exec=PulsarAnalyticsKit
          Icon=pulsar
          Type=Application
          Categories=Science;" > AppDir/usr/share/applications/pulsar.desktop

          cp AppDir/usr/share/applications/pulsar.desktop AppDir/pulsar.desktop
          cp AppDir/usr/share/icons/hicolor/256x256/apps/pulsar.png AppDir/pulsar.png
          chmod 644 AppDir/usr/share/applications/pulsar.desktop

          echo "Running linuxdeploy..."
          ./linuxdeploy -v1 \
            --appdir AppDir \
            --output appimage \
            --desktop-file AppDir/pulsar.desktop \
            --icon-file AppDir/pulsar.png

          echo "Creating AppImage..."
          chmod +x appimagetool
          ./appimagetool AppDir "PulsarAnalyticsKit-${VERSION}.AppImage"
          echo "AppImage created:"
          ls -lh PulsarAnalyticsKit-*.AppImage

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: PulsarAnalyticsKit-*.AppImage

  # 3. Final GitHub Release Upload
  upload-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.read_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-exe
          path: ./release-assets

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-appimage
          path: ./release-assets

      - name: Read version
        id: read_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: List files to be uploaded
        run: |
          echo "Files in release-assets:"
          ls -lhR release-assets

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.read_version.outputs.version }}
          name: v${{ steps.read_version.outputs.version }}
          files: |
            release-assets/PulsarAnalyticsKit-*.exe
            release-assets/PulsarAnalyticsKit-*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
